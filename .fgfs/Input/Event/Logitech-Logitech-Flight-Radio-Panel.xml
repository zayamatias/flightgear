<?xml version="1.0"?>
<PropertyList>
  <name type="string">Logitech Logitech Flight Radio Panel</name>
  <debug-events type="bool">true</debug-events>
  <nasal>
    <open>
      <![CDATA[
      var lastpressedup=0;
      var lastpresseddown=7;
      var getAirplaneType=func(){
        ## FUNCTION TO RETURN NUBER OF ENGINES AND TYPE OF ENGINES        
        ## Propeller types:
        # 1 - Regular
        # 2 - Turbo
        # 3 - Jet
        var engines = 1;  ## Default value
        var propeller = 1; ## Default value
        var jetbrand = 0;
        var gears = 0;
        var idx = 0;
        thisval = '';
        while (typeof(thisval)!='nil'){
          var tagname = '/sim/tags/tag['~idx~']';
          var thisval = getprop(tagname);
          if (thisval=='twin-engine'){ engines=2;
          }
          if (thisval=='2-engine'){ engines=2;
          }
          if (thisval=='3-engine'){ engines=3;
          }
          if (thisval=='4-engine'){ engines=4;
          }
          if (thisval=='four-engine'){ engines=4;
          }
          if (thisval=='turbocharged'){ propeller=2;
          }
          if (thisval=='turboprop'){ propeller=2;
          }
          if (thisval=='jet'){ propeller=3;
          }
          if (thisval=='bombardier'){ 
            jetbrand=1;
          }
          if (thisval=='retractable-gear'){ 
            gears=1;
          }
          
          idx = idx +1;
        }
        #print ('===========================================>>>>>>>>>>>> ENGINES:',engines,' PROPELLER:',propeller,' JET BRAND:',jetbrand);
        return [engines,propeller,jetbrand,gears];
      }

      var initPanel = func(){
        ### INITIALIZE ALL PANELS TO BLANK 
        setprop('/saitek/RP/ULpanel/digit1',10);
        setprop('/saitek/RP/ULpanel/digit2',10);
        setprop('/saitek/RP/ULpanel/digit3',10);
        setprop('/saitek/RP/ULpanel/digit4',10);
        setprop('/saitek/RP/ULpanel/digit5',10);
        setprop('/saitek/RP/URpanel/digit1',10);
        setprop('/saitek/RP/URpanel/digit2',10);
        setprop('/saitek/RP/URpanel/digit3',10);
        setprop('/saitek/RP/URpanel/digit4',10);
        setprop('/saitek/RP/URpanel/digit5',10);
        setprop('/saitek/RP/LLpanel/digit1',10);
        setprop('/saitek/RP/LLpanel/digit2',10);
        setprop('/saitek/RP/LLpanel/digit3',10);
        setprop('/saitek/RP/LLpanel/digit4',10);
        setprop('/saitek/RP/LLpanel/digit5',10);
        setprop('/saitek/RP/LRpanel/digit1',10);
        setprop('/saitek/RP/LRpanel/digit2',10);
        setprop('/saitek/RP/LRpanel/digit3',10);
        setprop('/saitek/RP/LRpanel/digit4',10);
        setprop('/saitek/RP/LRpanel/digit5',10);
      }
      var setdefault=func(){  
        ## CREATE DEFAULT SELECTOR PROPERTIES
        setprop('/saitek/RP/upknoba','/instrumentation/comm/frequencies/selected-mhz');
        setprop('/saitek/RP/upknobb','/instrumentation/comm/frequencies/standby-mhz');
        setprop('/saitek/RP/upknobt',5);
        setprop('/saitek/RP/upknobidx',1);
        setprop('/saitek/RP/upknobmax',137);
        setprop('/saitek/RP/upknobmin',118);
        setprop('/saitek/RP/upknobwrap',1);
        setprop('/saitek/RP/upknobfstep',1);
        setprop('/saitek/RP/upknobhstep',0.025);
        setprop('/saitek/RP/upknobsw','/instrumentation/comm/frq-swap-btn');
        setprop('/saitek/RP/lowknoba','/instrumentation/nav/frequencies/selected-mhz');
        setprop('/saitek/RP/lowknobb','/instrumentation/nav/frequencies/standby-mhz');
        setprop('/saitek/RP/lowknobt',5);
        setprop('/saitek/RP/lowknobidx',1);
        setprop('/saitek/RP/lowknobmax',118);
        setprop('/saitek/RP/lowknobmin',108);
        setprop('/saitek/RP/lowknobwrap',1);
        setprop('/saitek/RP/lowknobfstep',1);
        setprop('/saitek/RP/lowknobhstep',0.025);
        setprop('/saitek/RP/lowknobsw','/instrumentation/nav/frq-swap-btn');
        setprop('/saitek/RP/tempu',0);
        setprop('/saitek/RP/templ',0);
      }

      ## CHECK IF COMMS 1 IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND RADIO SHOULD BE ON

      var batavon = func(){
        var airplanetype = getAirplaneType();
        var bat = ((typeof(getprop('/controls/electric/battery-switch'))=='nil') or getprop('/controls/electric/battery-switch'));
        var mav = ((typeof(getprop('/controls/switches/master-avionics'))=='nil') or getprop('/controls/switches/master-avionics') or (airplanetype[1]==3));
        #print ('ENABLED ===<',typeof(getprop('/controls/switches/master-avionics')),'><',getprop('/controls/switches/master-avionics'),'><',(airplanetype[1]==3),'>>>>>',airplanetype[2]);
        var mas = ((typeof(getprop('/controls/switches/master'))=='nil') or getprop('/controls/switches/master') or (airplanetype[1]==3));
        var enabled = bat and (mav and mas);
        #print ( '================================================================',bat, ,mav,mas,' ENABLED = [',enabled,']');
        return enabled;
      }

      var comms1on = func(){
        return (batavon() and getprop('/instrumentation/comm/power-btn'));
      }

      ## CHECK IF COMMS 2 IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND RADIO SHOULD BE ON

      var comms2on = func(){
        return (batavon() and getprop('/instrumentation/comm[1]/power-btn'));
      }

      ## CHECK IF NAV 1 IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND NAV SHOULD BE ON

      var nav1on = func(){
        return (batavon() and getprop('/instrumentation/nav/power-btn'));
      }

      ## CHECK IF NAV 2 IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND NAV SHOULD BE ON

      var nav2on = func(){
        return (batavon() and getprop('/instrumentation/nav[1]/power-btn'));
      }

      ## CHECK IF ADF IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND ADF SHOULD BE ON

      var adfon = func(){
        return (batavon() and getprop('/instrumentation/adf/power-btn'));
      }

      ## CHECK IF DME IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND DME SHOULD BE ON

      var dmeon = func(){
        return (batavon() and getprop('/instrumentation/dme/power-btn'));
      }

      ## CHECK IF TRANSPONDER IS TURNED ON, FOR THIS THE BATTERY, AVIONICS AND TRANSPONDER SHOULD BE ON

      var xpdron = func(){
        return (batavon() and getprop('/instrumentation/dme/power-btn'));
      }

      ##CAN WE ACTIVATE THE PANELS?

      var activatepanels = func(){
        var activate = (comms1on() or comms2on() or nav1on() or nav2on() or adfon() or dmeon());
        return activate;
      }

      # CONVERT A STRING TO A LIST OF LEDS

      var ledconvert = func(strvalue,digits,isxpdr,xpdridx){
        var dotidx = find('.',strvalue);
        if (dotidx == digits){
          strvalue = substr(strvalue,0,digits);
          dotidx = -1;
        }
        ## GET THE SIZE OF THE ORIGINAL STRING
        var ssize = size(strvalue);
        ## SET DME AS FALSE BY DEFALUT
        ## IF DIGITS ARE MARKED AS 99 IT IS A NON FIXED SIZE
        if (digits==99){
          ## WE RETURN THE ACTUAL SIZE (less one if there's a DOT)
          if (dotidx != -1){
            digits = ssize-1;
          }else{
            digits=ssize;
          }
        }
        ## IF IT IS AN EMPTY STRING, FILL IT WITH BLANKS (10)
        if (ssize==0){
          return [10,10,10,10,10];
        }
        ### INITIALIZE THE DIGITS TO BE RETURNED
        var retdigs=[];
        ## IF NUMBER IS LESS THAN 5 IN SIZE, ADD PRECEEDING EMPTY'S
        for (n = 0;n < (5-digits);n += 1){
          append(retdigs,10);
        }
        ## GO DIGIT BY DIGIT, IT IS ALWAY A DIRECT CONVERSION EXCEPT FOR THE '.', WHICH ADDS 208 TO PREVIOUS DIGIT
        for (n = 0;n < ssize; n += 1){
          ## DO NOT PUT A DOT AT THE END
          if (substr(strvalue,n,1)=='.' and n<=4){
            retdigs[size(retdigs)-1]=retdigs[size(retdigs)-1]+208;
            }else{
              append(retdigs,num(substr(strvalue,n,1)));
           }
        }
        ## FOR XXX.00 NUMBERS THAT APPEAR AS 3 DIGITS, ADD A DOT (VALUE 208)
        if (size(retdigs)==3 and digits==5 and retdigs[0]!=10 ){
          retdigs[2]=retdigs[2]+208;
        }
        ## IF THERE ARE LESS DIGITS THAT THERE SHOULD BE, ADD TRAILING 0's
        if (size(retdigs)<digits){
          for (n=0;n<(digits-size(retdigs))+1;n += 1){
            append(retdigs,0);
          }
        }
        ## IF WE HAVE SELECTED THE XPDR FUNCTION, SHOW A DOT ON THE DIGIT SELECTION
        if (isxpdr){
          retdigs[xpdridx]=retdigs[xpdridx]+208;
        }
        return retdigs;
      }

      ## RETURN USABLE STRING FOR PANEL

      var panelvalue=func(prop,isxpdr,isdme){
        if (getprop(prop)!=''){
          if (!isxpdr){
            if (!isdme){
              strvalue = sprintf('%.3f',getprop(getprop(prop)));
            }else{
              strvalue = sprintf('%.3f',getprop(getprop(prop)));
            }
          }else{
            strvalue = convertxpdrvalue(getprop(getprop(prop)));
          }
        }
        return strvalue;
      }


      ## SET LEDS FOR UPPER RIGHT PANEL

      var setURPanel = func(prop) {
        if (!activatepanels()){
           return;
        }
        var isdme = (getprop('/saitek/RP/upknobsw')=='DME');
        var isxpdr = (getprop('/saitek/RP/upknobsw')=='XPDR');
        var idx = getprop('/saitek/RP/upknobidx');
        var strvalue =panelvalue(prop,isxpdr,isdme);
        var paneldigits = ledconvert(strvalue,getprop('/saitek/RP/upknobt'),isxpdr,idx); 
        setprop('/saitek/RP/URpanel/digit1',paneldigits[0]);
        setprop('/saitek/RP/URpanel/digit2',paneldigits[1]);
        setprop('/saitek/RP/URpanel/digit3',paneldigits[2]);
        setprop('/saitek/RP/URpanel/digit4',paneldigits[3]);
        setprop('/saitek/RP/URpanel/digit5',paneldigits[4]);
      }

      ## SET LEDS FOR UPPER LEFT PANEL

      var setULPanel = func(prop) {
        if (!activatepanels()){
          return;
        }
        var isxpdr = (getprop('/saitek/RP/upknobsw')=='XPDR');
        var isdme = (getprop('/saitek/RP/upknobsw')=='DME');
        var idx = getprop('/saitek/RP/upknobidx');
        if (!isxpdr){
          var strvalue =panelvalue(prop,isxpdr,isdme);
        }else{
          var strvalue='';
        }
        var paneldigits = ledconvert(strvalue,getprop('/saitek/RP/upknobt'),isxpdr,idx); 
        setprop('/saitek/RP/ULpanel/digit1',paneldigits[0]);
        setprop('/saitek/RP/ULpanel/digit2',paneldigits[1]);
        setprop('/saitek/RP/ULpanel/digit3',paneldigits[2]);
        setprop('/saitek/RP/ULpanel/digit4',paneldigits[3]);
        setprop('/saitek/RP/ULpanel/digit5',paneldigits[4]);
      }

      ## SET LEDS FOR LOWER RIGHT PANEL

      var setLRPanel = func(prop) {
        if (!activatepanels()){
          return;
        }
        var isxpdr = (getprop('/saitek/RP/lowknobsw')=='XPDR');
        var idx = getprop('/saitek/RP/lowknobidx');
        var isdme = (getprop('/saitek/RP/lowknobsw')=='DME');
        var strvalue =panelvalue(prop,isxpdr,isdme);
        var paneldigits = ledconvert(strvalue,getprop('/saitek/RP/lowknobt'),isxpdr,idx); 
        setprop('/saitek/RP/LRpanel/digit1',paneldigits[0]);
        setprop('/saitek/RP/LRpanel/digit2',paneldigits[1]);
        setprop('/saitek/RP/LRpanel/digit3',paneldigits[2]);
        setprop('/saitek/RP/LRpanel/digit4',paneldigits[3]);
        setprop('/saitek/RP/LRpanel/digit5',paneldigits[4]);
      }

      ## SET LEDS FOR LOWER LEFT PANEL

      var setLLPanel = func(prop) {
        if (!activatepanels()){
          return;
        }
        var isxpdr = (getprop('/saitek/RP/lowknobsw')=='XPDR');
        var idx = getprop('/saitek/RP/lowknobidx');
        var isdme = (getprop('/saitek/RP/lowknobsw')=='DME');
        if (!isxpdr){
          var strvalue =panelvalue(prop,isxpdr,isdme);
        }else{
          strvalue='';
        }
        var paneldigits = ledconvert(strvalue,getprop('/saitek/RP/lowknobt'),isxpdr,idx); 
        setprop('/saitek/RP/LLpanel/digit1',paneldigits[0]);
        setprop('/saitek/RP/LLpanel/digit2',paneldigits[1]);
        setprop('/saitek/RP/LLpanel/digit3',paneldigits[2]);
        setprop('/saitek/RP/LLpanel/digit4',paneldigits[3]);
        setprop('/saitek/RP/LLpanel/digit5',paneldigits[4]);
      }

      ### REFRESH ALL PANELS

      var refreshPanels = func(){
        setURPanel('/saitek/RP/upknobb');
        setULPanel('/saitek/RP/upknoba');
        setLRPanel('/saitek/RP/lowknobb');
        setLLPanel('/saitek/RP/lowknoba');
        }

        ## CONVERT STRING FOR XPDR, SINCE IT IS AN INTEGER, WE NEED TO ADD PRECEEDING 0's IF NEEDED 

      var convertxpdrvalue = func (xpdr){
        length = 4;
        temp = sprintf(xpdr);
        missing = length-size(temp);
        for (n=0;n<missing;n+=1){
          temp = '0'~temp;
        }
        return temp;
      }

      ## ADJUSTS THE VALUE OF A PROPERTY

      var adjustvalue = func (upper,full,incdec){
        #print ('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ADJUSTING VALUE');
        #print ('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> [',upper,'][',full,'][',incdec,']');
        if (upper){
          var chkprop = '/saitek/RP/upknobsw';
          var prop = getprop('/saitek/RP/upknobb');
          var max = getprop('/saitek/RP/upknobmax');
          var min = getprop('/saitek/RP/upknobmin');
          var wrap = getprop('/saitek/RP/upknobwrap');
          if (full){
            var step=getprop('/saitek/RP/upknobfstep')
          }else{
            var step=getprop('/saitek/RP/upknobhstep')
          }
        }else{
          var chkprop = '/saitek/RP/lowknobsw';
          var prop = getprop('/saitek/RP/lowknobb');
          var max = getprop('/saitek/RP/lowknobmax');
          var min = getprop('/saitek/RP/lowknobmin');
          var wrap = getprop('/saitek/RP/lowknobwrap');
          if (full){
            var step=getprop('/saitek/RP/lowknobfstep')
          }else{
            var step=getprop('/saitek/RP/lowknobhstep')
          }
        }
        if (incdec==0){
          step = -1*step;
        }
        if (!activatepanels()){
          return;
        }
        var valchkpro = getprop(chkprop);
        var isdme = (valchkpro=='DME');
        var isxpdr = (valchkpro=='XPDR');
        #print ('[',valchkpro,'] IS XPDR [',isxpdr,']');
        if (isdme){
          return;
        }
        if (isxpdr){
          if (upper){
            var idx = getprop('/saitek/RP/upknobidx');
          }else{
            var idx = getprop('/saitek/RP/lowknobidx');
          }
          #print ('IDX IS [',idx,']');
          sval=convertxpdrvalue(getprop(prop));
          numbs=[substr(sval,0,1),substr(sval,1,1),substr(sval,2,1),substr(sval,3,1)];
          numb = num(numbs[idx-1]);
          if (step > 0){
            numb = numb + 1;
            if (numb==8){
              numb = 0;
            }
          }else{
            numb = numb - 1;
            if (numb==-1){
              numb = 7;
            }
          }
          numbs[idx-1]=numb;
          sval = numbs[0]~numbs[1]~numbs[2]~numbs[3];
          setprop(prop,num(sval));
          return;
        }
        if (substr(prop,0,1) != '/'){
          return;
        }
        currval = sprintf('%.3f',getprop(prop));
        #print ('BEFORE ',currval);
        currval = sprintf('%.3f',currval + step);
        #print ('AFTER ',currval);
        if (currval > max){
          if (wrap){
            currval = min;
          }else{
            currval = max;
          }
        }
        if (currval < min){
          if (wrap) {
            currval = max;
          }else{
            currval = min;
          }
        }
        setprop(prop,currval);
      }

      ## CALLED BY THE SWAP BUTTON EVENT, IT SWITCHES VALUES EXCEPT FOR XPDR, WHICH CYCES THROUGH DIGITS

      var switchbtn = func(upper){
        #print ('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> SWITHCHING [',upper,']');
        var isdme = ((getprop('/saitek/RP/lowknobsw')=='DME') and !upper) or (getprop('/saitek/RP/upknobsw')=='DME' and upper);
        if (isdme){
          var selected = !getprop('/instrumentation/dme/switch-min-kts');
          setprop('/instrumentation/dme/switch-min-kts',selected);
          if (selected){
            if (upper){
              setprop('/saitek/RP/upknobb','/instrumentation/dme/indicated-ground-speed-kt');
            }else{
              setprop('/saitek/RP/lowknobb','/instrumentation/dme/indicated-ground-speed-kt');
            }
          }else{
            if (upper){
              setprop('/saitek/RP/upknobb','/instrumentation/dme/indicated-time-min');
            }else{
              setprop('/saitek/RP/lowknobb','/instrumentation/dme/indicated-time-min');
            }
          }
          refreshPanels();
          return;
        }
        var isxpdr = (getprop('/saitek/RP/lowknobsw')=='XPDR' and upper!=1) or (getprop('/saitek/RP/upknobsw')=='XPDR' and upper==1);
        ## XPDR, CYCLE THROUGH DIGITS, CHECK IF IT IS UPPER OR LOWER PANEL AND UPDATE DIGIT SELECTION
        if (isxpdr){
          if (upper){
            var idxprop = '/saitek/RP/upknobidx';
          }else{  
            var idxprop = '/saitek/RP/lowknobidx';
          }
          var idx = getprop(idxprop);
          idx = idx + 1;
          if (idx == 5){
            idx =1;
          }
          setprop(idxprop,idx);
          refreshPanels();
          return;
        }

        ## ALL OTHER 'NORMAL' CASES
        if (upper){
          setprop('/saitek/RP/tempu',getprop(getprop('/saitek/RP/upknoba')));
          setprop(getprop('/saitek/RP/upknoba'),getprop(getprop('/saitek/RP/upknobb')));
          setprop(getprop('/saitek/RP/upknobb'),getprop('/saitek/RP/tempu'));
          setprop(getprop('/saitek/RP/upknobsw'),0);
        }else{
          setprop('/saitek/RP/templ',getprop(getprop('/saitek/RP/lowknoba')));
          setprop(getprop('/saitek/RP/lowknoba'),getprop(getprop('/saitek/RP/lowknobb')));
          setprop(getprop('/saitek/RP/lowknobb'),getprop('/saitek/RP/templ'));
        setprop(getprop('/saitek/RP/lowknobsw'),0);
        }
      refreshPanels();
      }

      ## THIS FUNCTION IS USED WHEN STARTING UP THE AIRPLANE, TO MAKE SURE THAT OK CONDITIONS ARE MET TO INITIALIZE PANEL
      
      var waitabit = func(){
        if (!activatepanels()){
          initPanel();
        }
        settimer(refreshPanels,1.5);
      }

      ## THIS FUNCTION IS USED BY LISTENERS TO UPDATE PANEL WHEN CHANGES IN THE SIM HAPPEN
      
      var shutPanel = func(){
        #print ('BYE BYE !');
        initPanel();
      }

      var assingProp=func(butt,upper,rpropa,rpropb,buttval,swbtn,max,min,biginc,smallinc){
      print ('>>>>>>>>>>>>>>>>>>>>>>>> BUTTON [',butt,'] HAS BEEN PRESSED LASTUP [',lastpressedup,'] LASTDOWN [',lastpresseddown,']');
      if (butt>7){
        if (butt==lastpresseddown or math.abs(butt-lastpresseddown)>5){
          #print ('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SAME BUTTON HAS BEEN PRESSED');
          return;
        }else{
          lastpresseddown=butt;
        }
      }else{
        if (butt==lastpressedup or math.abs(butt-lastpressedup)>5){
          #print ('>>>>>>>>>>>>>>>>>>>>>>>SAME BUTTON HAS BEEN PRESSED');
          return;
        }else{
          lastpressedup = butt;
        }
      } 
      #print ('>>>>>>>>>>>>>>>>>>>>>>>LAST PRESSED ',lastpresseddown,'/',lastpressedup);
      if (upper){
          propa='/saitek/RP/upknoba';
          propb='/saitek/RP/upknobb';
          propc='/saitek/RP/upknobt';
          propd='/saitek/RP/upknobsw';
          prope='/saitek/RP/upknobmax';
          propf='/saitek/RP/upknobmin';
          propg='/saitek/RP/upknobfstep';
          proph='/saitek/RP/upknobhstep';
      }else{
          propa='/saitek/RP/lowknoba';
          propb='/saitek/RP/lowknobb';
          propc='/saitek/RP/lowknobt';
          propd='/saitek/RP/lowknobsw';
          prope='/saitek/RP/lowknobmax';
          propf='/saitek/RP/lowknobmin';
          propg='/saitek/RP/lowknobfstep';
          proph='/saitek/RP/lowknobhstep';
    
      }

      #print ('[',butt,'][',upper,'][',propa,'][',propb,'][',propc,'][',propd,'][',prope,'][',propf,'][',propg,'][',proph,']');
      #print ('<',butt,'><',upper,'>[',rpropa,'][',rpropb,'][',buttval,'][',swbtn,'][',max,'][',min,'][',biginc,'][',smallinc,']');

      setprop (propa,rpropa);
      setprop (propb,rpropb);
      setprop (propc,buttval);
      setprop (propd,swbtn);
      setprop (prope,max);
      setprop (propf,min);
      setprop (propg,biginc);
      setprop (proph,smallinc);
      
      refreshPanels();
    }

      ## SET LISTENERS, SO PANEL GETS UPDATED EVEN IF CHANGES ARE DONE DIECTLY IN THE SIM
      initPanel();
      setdefault();
      var lis1 = setlistener('/instrumentation/comm/power-btn',waitabit,runtime=0);
      var lis16 = setlistener('/controls/switches/master-avionics',waitabit,runtime=0);
      var lis17 = setlistener('/controls/switches/master',waitabit,runtime=0);
      var lis2 = setlistener('/instrumentation/comm/frequencies/selected-mhz',refreshPanels);
      var lis3 = setlistener('/instrumentation/comm/frequencies/standby-mhz',refreshPanels);
      var lis4 = setlistener('/instrumentation/nav/frequencies/standby-mhz',refreshPanels);
      var lis5 = setlistener('/instrumentation/nav/frequencies/selected-mhz',refreshPanels);
      var lis6 = setlistener('/instrumentation/comm[1]/frequencies/standby-mhz',refreshPanels);
      var lis7 = setlistener('/instrumentation/comm[1]/frequencies/selected-mhz',refreshPanels);
      var lis8 = setlistener('/instrumentation/nav[1]/frequencies/standby-mhz',refreshPanels);
      var lis9 = setlistener('/instrumentation/nav[1]/frequencies/selected-mhz',refreshPanels);
      var lis10 = setlistener('/instrumentation/dme/indicated-distance-nm',refreshPanels);
      var lis101 = setlistener('/instrumentation/dme/indicated-ground-speed-kt',refreshPanels);
      var lis102 = setlistener('/instrumentation/dme/indicated-time-min',refreshPanels);
      var lis11 = setlistener('/instrumentation/adf/frequencies/standby-khz',refreshPanels);
      var lis13 = setlistener('/instrumentation/adf/frequencies/selected-khz',refreshPanels);
      var lis14 = setlistener('/instrumentation/transponder/id-code',refreshPanels);
      var lis15 = setlistener("/sim/signals/exit", shutPanel,runtime=1);
    ]]>
    </open>
  </nasal>

  <!--UPPER KNOB IN COM1 -->
  <event>
    <desc>UK COMM1</desc>
    <name>button-1</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(1,1,'/instrumentation/comm/frequencies/selected-mhz','/instrumentation/comm/frequencies/standby-mhz',5,'/instrumentation/comm/frq-swap-btn',137,118,1,0.025);      </script>
    </binding>
  </event>
  <!--UPPER KNOB IN COM2 -->
  <event>
    <desc>UK COMM2</desc>
    <name>button-2</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(2,1,'/instrumentation/comm[1]/frequencies/selected-mhz','/instrumentation/comm[1]/frequencies/standby-mhz',5,'/instrumentation/comm[1]/frq-swap-btn',137,118,1,0.025);      </script>
    </binding>
  </event>
  <!--UPPER KNOB IN NAV1 -->
  <event>
    <desc>UK NAV1</desc>
    <name>button-3</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(3,1,'/instrumentation/nav/frequencies/selected-mhz','/instrumentation/nav/frequencies/standby-mhz',5,'/instrumentation/nav/frq-swap-btn',118,108,1,0.025);      </script>
    </binding>

  </event>
  <!--UPPER KNOB IN NAV2 -->
  <event>
    <desc>UK NAV2</desc>
    <name>button-4</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(4,1,'/instrumentation/nav[1]/frequencies/selected-mhz','/instrumentation/nav[1]/frequencies/standby-mhz',5,'/instrumentation/nav[1]/frq-swap-btn',118,108,1,0.025);      </script>
    </binding>
  </event>
  <!--UPPER KNOB IN ADF -->
  <event>
    <desc>UK ADF</desc>
    <name>button-5</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(5,1,'/instrumentation/adf/frequencies/selected-khz','/instrumentation/adf/frequencies/standby-khz',3,'/instrumentation/adf/frq-swap-btn',535,190,10,1);      </script>
    </binding>
  </event>
  <!--UPPER KNOB IN DME -->
  <event>
    <desc>UK DME</desc>
    <name>button-6</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(6,1,'/instrumentation/dme/indicated-distance-nm','/instrumentation/dme/indicated-ground-speed-kt',99,'DME',0,0,0,0);      </script>
    </binding>
    </event>
  <!--UPPER KNOB IN XPDR -->
  <event>
    <desc>UK XPDR</desc>
    <name>button-7</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(7,1,'','/instrumentation/transponder/id-code',4,'XPDR',1,1,0,0);      </script>
    </binding>
  </event>




  <!--LOWER KNOB IN COM1 -->
  <event>
    <desc>LK COMM1</desc>
    <name>button-8</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(8,0,'/instrumentation/comm/frequencies/selected-mhz','/instrumentation/comm/frequencies/standby-mhz',5,'/instrumentation/comm/frq-swap-btn',137,118,1,0.025);      </script>
    </binding>
  </event>
  <!--LOWER KNOB IN COM2 -->
  <event>
    <desc>LK COMM2</desc>
    <name>button-9</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(9,0,'/instrumentation/comm[1]/frequencies/selected-mhz','/instrumentation/comm[1]/frequencies/standby-mhz',5,'/instrumentation/comm[1]/frq-swap-btn',137,118,1,0.025);      </script>
    </binding>  </event>
  <!--LOWER KNOB IN NAV1 -->
  <event>
    <desc>LK NAV1</desc>
    <name>button-10</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(10,0,'/instrumentation/nav/frequencies/selected-mhz','/instrumentation/nav/frequencies/standby-mhz',5,'/instrumentation/nav/frq-swap-btn',118,108,1,0.025);      </script>
    </binding>  </event>
  <!--LOWER KNOB IN NAV2 -->
  <event>
    <desc>LK NAV2</desc>
    <name>button-11</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(11,0,'/instrumentation/nav[1]/frequencies/selected-mhz','/instrumentation/nav[1]/frequencies/standby-mhz',5,'/instrumentation/nav[1]/frq-swap-btn',118,108,1,0.025);      </script>
    </binding>
  </event>
  <!--LOWER KNOB IN ADF -->
  <event>
    <desc>LK ADF</desc>
    <name>button-12</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(12,0,'/instrumentation/adf/frequencies/selected-khz','/instrumentation/adf/frequencies/standby-khz',3,'/instrumentation/adf/frq-swap-btn',535,190,10,1);      </script>
    </binding>
  </event>
  <!--LOWER KNOB IN DME -->
  <event>
    <desc>UK DME</desc>
    <name>button-13</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(13,0,'/instrumentation/dme/indicated-distance-nm','/instrumentation/dme/indicated-ground-speed-kt',99,'DME',0,0,0,0);      </script>
    </binding>
  </event>
  <!--LOWER KNOB IN XPDR -->
  <event>
    <desc>LK XPDR</desc>
    <name>button-14</name>
    <repeatable>false</repeatable>
    <binding>
      <command>nasal</command>
      <script>assingProp(14,0,'','/instrumentation/transponder/id-code',4,'XPDR',1,1,0,0);      </script>
    </binding>
  </event>



  <!-- UPPER SWAP BUTTON -->
  <event>
    <desc>UPPER SWAP BUTTON</desc>
    <name>button-15</name>
    <binding>
      <command>nasal</command>
      <!-- TRUE Denotes UPPER button -->
      <script>switchbtn(1);</script>
    </binding>
  </event>
  <!-- LOWER SWAP BUTTON -->
  <event>
    <desc>LOWER SWAP BUTTON</desc>
    <name>button-16</name>
    <binding>
      <command>nasal</command>
      <!-- TRUE Denotes UPPER button -->
      <script>switchbtn(0);</script>
    </binding>
  </event>
  <!-- UPPER COMMS DECREASE BY FULL STEP -->
  <event>
    <desc>COMMS-SBY-DEC-025</desc>
    <name>button-17</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(1,0,0);
      </script>
    </binding>
  </event>
  <!-- UPPER COMMS INCREASE BY FULL STEP -->
  <event>
    <desc>UPPER-SBY-INC-025</desc>
    <name>button-18</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(1,0,1);
      </script>
    </binding>
  </event>
  <!-- UPPER COMMS DECREASE BY HALF STEP -->
  <event>
    <desc>UPPER-SBY-DEC-10</desc>
    <name>button-19</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(1,1,0);
      </script>
    </binding>
  </event>
  <!-- UPPER COMMS INCREASE BY HALF STEP -->
  <event>
    <desc>UPPER-SBY-INC-10</desc>
    <name>button-20</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(1,1,1);
      </script>
    </binding>
  </event>

  <!-- LOWER COMMS DECREASE BY FULL STEP -->
  <event>
    <desc>LOWER-SBY-DEC-025</desc>
    <name>button-21</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(0,0,0);
      </script>
    </binding>
  </event>
  <!-- LOWER COMMS INCREASE BY FULL STEP -->
  <event>
    <desc>LOWER-SBY-INC-025</desc>
    <name>button-22</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(0,0,1);
      </script>
    </binding>
  </event>
  <!-- LOWER COMMS DECREASE BY HALF STEP -->
  <event>
    <desc>LOWER-SBY-DEC-10</desc>
    <name>button-23</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(0,1,0);
      </script>
    </binding>
    </event>
  <!-- LOWER COMMS INCREASE BY HALF STEP -->
  <event>
    <desc>LOWER-SBY-INC-10</desc>
    <name>button-24</name>
    <binding>
      <command>nasal</command>
      <script>
        adjustvalue(0,1,1);
      </script>
    </binding>
  </event>


  <!-- UL PANEL -->
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>pointer</name>
    <setting>
      <property>/saitek/RP/ULpanel/digit1</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>mouse</name>
    <setting>
      <property>/saitek/RP/ULpanel/digit2</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>reserved03</name>
    <setting>
      <property>/saitek/RP/ULpanel/digit3</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>joystick</name>
    <setting>
      <property>/saitek/RP/ULpanel/digit4</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>gamepad</name>
    <setting>
      <property>/saitek/RP/ULpanel/digit5</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>keyboard</name>
    <setting>
      <property>/saitek/RP/URpanel/digit1</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>keypad</name>
    <setting>
      <property>/saitek/RP/URpanel/digit2</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>multiaxiscontroller</name>
    <setting>
      <property>/saitek/RP/URpanel/digit3</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>tabletpcsysctrls</name>
    <setting>
      <property>/saitek/RP/URpanel/digit4</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>watercoolingdevice</name>
    <setting>
      <property>/saitek/RP/URpanel/digit5</property>
    </setting>
  </event>
  <!-- LL PANEL -->
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>computerchassisdevice</name>
    <setting>
      <property>/saitek/RP/LLpanel/digit1</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>wirelessradiocontrols</name>
    <setting>
      <property>/saitek/RP/LLpanel/digit2</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>portabledevicecontrol</name>
    <setting>
      <property>/saitek/RP/LLpanel/digit3</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>systemmultiaxiscontroller</name>
    <setting>
      <property>/saitek/RP/LLpanel/digit4</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>spatialcontroller</name>
    <setting>
      <property>/saitek/RP/LLpanel/digit5</property>
    </setting>
  </event>
  <!-- LR panel -->
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>assistivecontrol</name>
    <setting>
      <property>/saitek/RP/LRpanel/digit1</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>devicedock</name>
    <setting>
      <property>/saitek/RP/LRpanel/digit2</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>dockabledevice</name>
    <setting>
      <property>/saitek/RP/LRpanel/digit3</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>callstatemanagementcontrol</name>
    <setting>
      <property>/saitek/RP/LRpanel/digit4</property>
    </setting>
  </event>
  <event>
    <desc>RADIO INDICATORS</desc>
    <name>reserved14</name>
    <setting>
      <property>/saitek/RP/LRpanel/digit5</property>
    </setting>
  </event>
</PropertyList>